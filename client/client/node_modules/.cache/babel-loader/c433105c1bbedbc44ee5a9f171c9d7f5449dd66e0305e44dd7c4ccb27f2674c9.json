{"ast":null,"code":"const express = require(\"express\");\nconst mysql = require(\"mysql\");\nconst app = express();\nconst port = 5000;\n\n// Set up your MySQL connection\nconst db = mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  // replace with your MySQL user\n  password: \"\",\n  // replace with your MySQL password\n  database: \"your_database\" // replace with your database name\n});\ndb.connect(err => {\n  if (err) {\n    console.error(\"Error connecting to the database: \" + err.stack);\n    return;\n  }\n  console.log(\"Connected to the database!\");\n});\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// Route to fetch customers\napp.get(\"/customers\", (req, res) => {\n  db.query(\"SELECT * FROM customer\", (err, results) => {\n    if (err) {\n      console.error(\"Error fetching customers: \", err);\n      return res.status(500).send(\"Error fetching customers.\");\n    }\n    res.json(results);\n  });\n});\n\n// Route to update customer details\napp.put(\"/customers/:id\", (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    first_name,\n    middle_name,\n    last_name,\n    dob,\n    contact,\n    email,\n    pan_no,\n    address_area,\n    address_city,\n    address_pincode\n  } = req.body;\n\n  // Input validation\n  if (!first_name || !last_name || !dob || !contact || !email || !pan_no || !address_area || !address_city || !address_pincode) {\n    return res.status(400).json({\n      error: \"All fields are required.\"\n    });\n  }\n\n  // Ensure the customer exists first\n  db.query(\"SELECT * FROM customer WHERE c_id = ?\", [id], (err, result) => {\n    if (err) {\n      console.error(\"Error checking customer existence: \", err);\n      return res.status(500).send(\"Error checking customer existence.\");\n    }\n    if (result.length === 0) {\n      return res.status(404).send({\n        error: \"Customer not found.\"\n      });\n    }\n\n    // Update customer details if customer exists\n    const query = `\n            UPDATE customer SET \n                first_name = ?, \n                middle_name = ?, \n                last_name = ?, \n                dob = ?, \n                contact = ?, \n                email = ?, \n                pan_no = ?, \n                address_area = ?, \n                address_city = ?, \n                address_pincode = ? \n            WHERE c_id = ?\n        `;\n    const values = [first_name, middle_name, last_name, dob, contact, email, pan_no, address_area, address_city, address_pincode, id];\n    db.query(query, values, (err, result) => {\n      if (err) {\n        console.error(\"Error updating customer: \", err);\n        return res.status(500).send({\n          error: \"Error updating customer. Please try again later.\"\n        });\n      }\n      if (result.affectedRows === 0) {\n        return res.status(404).send({\n          error: \"Customer not found.\"\n        });\n      }\n      res.send({\n        message: \"Customer updated successfully!\"\n      });\n    });\n  });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mysql","app","port","db","createConnection","host","user","password","database","connect","err","console","error","stack","log","use","json","get","req","res","query","results","status","send","put","id","params","first_name","middle_name","last_name","dob","contact","email","pan_no","address_area","address_city","address_pincode","body","result","length","values","affectedRows","message","listen"],"sources":["C:/Users/prana/Downloads/mainfolder/Shinde-bank/client/client/src/components/Update.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql\");\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Set up your MySQL connection\r\nconst db = mysql.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\", // replace with your MySQL user\r\n    password: \"\", // replace with your MySQL password\r\n    database: \"your_database\", // replace with your database name\r\n});\r\n\r\ndb.connect((err) => {\r\n    if (err) {\r\n        console.error(\"Error connecting to the database: \" + err.stack);\r\n        return;\r\n    }\r\n    console.log(\"Connected to the database!\");\r\n});\r\n\r\n// Middleware to parse JSON bodies\r\napp.use(express.json());\r\n\r\n// Route to fetch customers\r\napp.get(\"/customers\", (req, res) => {\r\n    db.query(\"SELECT * FROM customer\", (err, results) => {\r\n        if (err) {\r\n            console.error(\"Error fetching customers: \", err);\r\n            return res.status(500).send(\"Error fetching customers.\");\r\n        }\r\n        res.json(results);\r\n    });\r\n});\r\n\r\n// Route to update customer details\r\napp.put(\"/customers/:id\", (req, res) => {\r\n    const { id } = req.params;\r\n    const {\r\n        first_name,\r\n        middle_name,\r\n        last_name,\r\n        dob,\r\n        contact,\r\n        email,\r\n        pan_no,\r\n        address_area,\r\n        address_city,\r\n        address_pincode,\r\n    } = req.body;\r\n\r\n    // Input validation\r\n    if (!first_name || !last_name || !dob || !contact || !email || !pan_no || !address_area || !address_city || !address_pincode) {\r\n        return res.status(400).json({ error: \"All fields are required.\" });\r\n    }\r\n\r\n    // Ensure the customer exists first\r\n    db.query(\"SELECT * FROM customer WHERE c_id = ?\", [id], (err, result) => {\r\n        if (err) {\r\n            console.error(\"Error checking customer existence: \", err);\r\n            return res.status(500).send(\"Error checking customer existence.\");\r\n        }\r\n\r\n        if (result.length === 0) {\r\n            return res.status(404).send({ error: \"Customer not found.\" });\r\n        }\r\n\r\n        // Update customer details if customer exists\r\n        const query = `\r\n            UPDATE customer SET \r\n                first_name = ?, \r\n                middle_name = ?, \r\n                last_name = ?, \r\n                dob = ?, \r\n                contact = ?, \r\n                email = ?, \r\n                pan_no = ?, \r\n                address_area = ?, \r\n                address_city = ?, \r\n                address_pincode = ? \r\n            WHERE c_id = ?\r\n        `;\r\n        const values = [\r\n            first_name,\r\n            middle_name,\r\n            last_name,\r\n            dob,\r\n            contact,\r\n            email,\r\n            pan_no,\r\n            address_area,\r\n            address_city,\r\n            address_pincode,\r\n            id,\r\n        ];\r\n\r\n        db.query(query, values, (err, result) => {\r\n            if (err) {\r\n                console.error(\"Error updating customer: \", err);\r\n                return res.status(500).send({ error: \"Error updating customer. Please try again later.\" });\r\n            }\r\n\r\n            if (result.affectedRows === 0) {\r\n                return res.status(404).send({ error: \"Customer not found.\" });\r\n            }\r\n\r\n            res.send({ message: \"Customer updated successfully!\" });\r\n        });\r\n    });\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}